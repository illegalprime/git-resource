#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/git-resource-request

cat > $payload <&0

load_pubkey $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
paths="$(jq -r '(.source.paths // ["."])[]' < $payload)" # those "'s are important
dyn_paths=$(jq -r '.source.dyn_paths // ""' < $payload)
ignore_paths="$(jq -r '":!" + (.source.ignore_paths // [])[]' < $payload)" # these ones too
tag_filter=$(jq -r '.source.tag_filter // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
ref=$(jq -r '.version.ref // ""' < $payload)
skip_ci_disabled=$(jq -r '.source.disable_ci_skip // false' < $payload)

configure_git_global "${git_config_payload}"

destination=$TMPDIR/git-resource-repo-cache

tagflag=""
if [ -n "$tag_filter" ]; then
  tagflag="--tags"
fi

# We're just checking for commits; we don't ever need to fetch LFS files here!
export GIT_LFS_SKIP_SMUDGE=1

if [ -d $destination ]; then
  cd $destination
  git fetch $tagflag -f
  git reset --hard FETCH_HEAD
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone --single-branch $uri $branchflag $destination $tagflag
  cd $destination
fi

if [ -n "$ref" ] && git cat-file -e "$ref"; then
  init_commit=$(git rev-list --max-parents=0 HEAD)
  if [ "${ref}" = "${init_commit}" ]; then
    log_range="--reverse HEAD"
  else
    log_range="--reverse ${ref}~1..HEAD"
  fi
else
  log_range="-1"
  ref=""
fi

if [ "$paths" = "." ] && [ -z "$ignore_paths" ]; then
  paths_search=""
else
  paths_search="-- $paths $ignore_paths"
fi

ci_skip=""
if [ "$skip_ci_disabled" != "true" ]; then
  ci_skip="--grep \\[ci\\sskip\\] --grep \\[skip\\sci\\] --invert-grep"
fi

replace_escape_chars() {
  sed -e 's/[]\/$*.^[]/\\&/g' <<< $1
}

lines_including_and_after() {
  local escaped_string=$(replace_escape_chars $1)
  sed -ne "/$escaped_string/,$ p"
}

get_commit(){
  for tag in $*; do
    commit=$(git rev-list -n 1 $tag)
    jq -n '{ref: $tag, commit: $commit}' --arg tag $tag --arg commit $commit
  done
}

dyn_paths_changed() {
  local commit="$1"
  local dyn_paths="$2"
  # go to that commit in history
  git checkout "$commit"
  # look at the paths at that point in history
  if [[ -f "$dyn_paths" ]]; then
    # get the match list and list of files changed in that commit
    mapfile -t match_paths < "$dyn_paths"
    mapfile -t mod_paths < <(
        git diff-tree --no-commit-id --name-only -r "$commit"
    )
    for mod_path in "${mod_paths[@]}"; do
      for matcher in "${match_paths[@]}"; do
        if [[ "/${mod_path}" =~ ^"$matcher/" || "/${mod_path}" == "$matcher" ]]
        then echo "$commit"; return; fi
      done
    done
  fi
}

if [ -n "$tag_filter" ]; then
  {
    if [ -n "$ref" ] && [ -n "$branch" ]; then
      tags=$(git tag --list "$tag_filter" --sort=creatordate --contains $ref --merged $branch)
      get_commit $tags
    elif [ -n "$ref" ]; then
      tags=$(git tag --list "$tag_filter" --sort=creatordate | lines_including_and_after $ref)
      get_commit $tags
    else
      tag=$(git tag --list "$tag_filter" --sort=creatordate | tail -1)
      get_commit $tag
    fi
  } | jq -s "map(.)" >&3
elif [ -n "$dyn_paths" ]; then
  # get all the commits we have to check
  mapfile -t commits < <(
    git log $ci_skip --format='%H' --first-parent $log_range
  )
  # go through each one and check if the paths there have changed
  (
    for commit in "${commits[@]}"; do
      dyn_paths_changed "$commit" "$dyn_paths"
    done
  ) | jq -R . | jq -s "map({ref: .})" >&3
else
  {
    set -f
    git log $ci_skip --format='%H' --first-parent $log_range $paths_search
    set +f
  } | jq -R '.' | jq -s "map({ref: .})" >&3
fi
